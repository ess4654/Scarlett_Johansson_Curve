import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 0.6;
float FR = 25;
float SampleRate = 5;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color hair = color(224, 183, 112);
color red = color(222, 76, 63);
color brown = color(108, 68, 58);
color skin = color(250, 195, 174);
color eyes = color(84, 119, 123);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Coding Track - 01.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.012;
  
  if(T >= 317.407) { //END
    strokes.add(1);
    lineColor.add(color(0, 0, 0));
    return 104 * PI;
  }
  if(T >= 314.193 && T < 317.407) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(brown);
    return T - 0.008;
  }
  if(T >= 304.767 && T < 314.193) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 314.193;
  }
  if(T >= 301.601 && T < 304.767) { //LEFT EYE
    strokes.add(2);
    lineColor.add(brown);
    return T - 0.008;
  }
  if(T >= 292.223 && T < 301.601) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 301.601;
  }
  if(T >= 289.033 && T < 292.223) { //RIGHT SHOULDER
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 279.679 && T < 289.033) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 289.033;
  }
  if(T >= 276.489 && T < 279.679) { //LEFT SHOULDER
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 267.147 && T < 276.489) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 276.489;
  }
  if(T >= 263.897 && T < 267.147) { //NECK LINES
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 254.556 && T < 263.897) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 263.897;
  }
  if(T >= 251.354 && T < 254.556) { //SHIRT NECK
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 241.903 && T < 251.354) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.354;
  }
  if(T >= 238.765 && T < 241.903) { //HAIR
    strokes.add(3);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 229.359 && T < 238.765) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 238.765;
  }
  if(T >= 226.197 && T < 229.359) { //HAIR
    strokes.add(3);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 216.809 && T < 226.197) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.197;
  }
  if(T >= 213.631 && T < 216.809) { //HAIR
    strokes.add(3);
    lineColor.add(hair);
    return T - 0.008;
  }
  if(T >= 204.240 && T < 213.631) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.631;
  }
  if(T >= 201.062 && T < 204.240) { //HAIR
    strokes.add(3);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 191.696 && T < 201.062) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.062;
  }
  if(T >= 188.506 && T < 191.696) { //HAIR OUTLINE
    strokes.add(3);
    lineColor.add(hair);
    return T - 0.01;
  }
  if(T >= 177.701 && T < 188.506) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.506;
  }
  if(T >= 176.010 && T < 177.701) { //LEFT NOSTRIL
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 165.048 && T < 176.010) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 176.010;
  }
  if(T >= 163.417 && T < 165.048) { //RIGHT NOSTRIL 
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 154.447 && T < 163.417) { //SKIP 
    strokes.add(1);
    lineColor.add(white);
    return 163.417;
  }
  if(T >= 150.825 && T < 154.447) { //RIGHT NOSE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 141.794 && T < 150.825) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 150.825;
  }
  if(T >= 138.256 && T < 141.794) { //LEFT NOSE
    strokes.add(3);
    lineColor.add(skin);
    return T;
  }
  if(T >= 128.819 && T < 138.256) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 138.256;
  }
  if(T >= 125.899 && T < 128.819) { //LIPS
    strokes.add(2);
    lineColor.add(red);
    return T;
  }
  if(T >= 116.091 && T < 125.899) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 125.899;
  }
  if(T >= 113.139 && T < 116.091) { //RIGHT PUPIL
    strokes.add(3);
    lineColor.add(white);
    return T;
  }
  if(T >= 104.438 && T < 113.139) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.139;
  }
  if(T >= 100.550 && T < 104.438) { //LEFT PUPIL
    strokes.add(3);
    lineColor.add(white);
    return T;
  }
  if(T >= 94.225 && T < 100.550) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 100.550;
  }
  if(T >= 88.057 && T < 94.225) { //RIGHT EYEBALL
    strokes.add(2);
    lineColor.add(eyes);
    return T;
  }
  if(T >= 81.564 && T < 88.057) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 88.057;
  }
  if(T >= 75.480 && T < 81.564) { //LEFT EYEBALL
    strokes.add(2);
    lineColor.add(eyes);
    return T;
  }
  if(T >= 69.106 && T < 75.480) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.480;
  }
  if(T >= 62.855 && T < 69.106) { //RIGHT EYE
    strokes.add(2);
    lineColor.add(skin);
    return T - 0.002;
  }
  if(T >= 56.542 && T < 62.855) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.855;
  }
  if(T >= 50.314 && T < 56.542) { //LEFT EYE
    strokes.add(2);
    lineColor.add(skin);
    return T;
  }
  if(T >= 43.977 && T < 50.314) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 50.314;
  }
  if(T >= 37.701 && T < 43.977) { //RIGHT EYEBROW
    strokes.add(2);
    lineColor.add(brown);
    return T;
  }
  if(T >= 31.449 && T < 37.701) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.701;
  }
  if(T >= 25.138 && T < 31.449) { //LEFT EYEBROW
    strokes.add(2);
    lineColor.add(brown);
    return T;
  }
  if(T >= 18.911 && T < 25.138) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.138;
  }
  if(T >= 12.600 && T < 18.911) { //LIPS
    strokes.add(2);
    lineColor.add(red);
    return T;
  }
  if(T >= 6.296 && T < 12.600) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.600;
  }
  else { //FACE
    strokes.add(4);
    lineColor.add(skin);
  }
  
  return T;
}

void draw()
{ 
  if(frameCount < (FR/0.9)) return;
  if(t <= 104 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.0008;
  }
  
  translate(width/2 + 40, height/2 - 80);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    if(points.get(i).x == 0 && points.get(i).y == 0) continue;
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((-27.0/2*sin(11.0/7 - 4*t) - 17.0/4*sin(11.0/7 - 2*t) + 128.0/7*sin(t + 33.0/7) + 139.0/8*sin(3*t + 14.0/3) + 39.0/7*sin(5*t + 14.0/3) + 71.0/3*sin(6*t + 33.0/7) + 37.0/8*sin(7*t + 8.0/5) + 97.0/4*sin(8*t + 14.0/3) + 55.0/7*sin(9*t + 11.0/7) + 100.0/7*sin(10*t + 14.0/3) +sin(11*t + 31.0/7) + 73.0/24*sin(12*t + 11.0/8) + 47.0/7*sin(13*t + 11.0/7) + 431.0/18*sin(14*t + 3.0/2) + 133.0/8*sin(15*t + 3.0/2) + 45.0/2*sin(16*t + 37.0/8) + 13.0/5*sin(17*t + 14.0/3) + 32.0/9*sin(18*t + 16.0/11) + 18.0/7*sin(19*t + 41.0/9) + 11.0/12*sin(20*t + 14.0/3) + 15.0/8*sin(21*t + 3.0/2) + 1.0/3*sin(22*t + 13.0/9) + 4.0/7*sin(23*t + 8.0/5) + 2.0/7*sin(24*t + 7.0/5) + 2.0/3*sin(25*t + 10.0/7) + 107.0/2)*theta(103*PI -t)*theta(t - 99*PI) + (-2.0/7*sin(4.0/3 - 24*t) - 6.0/11*sin(11.0/7 - 23*t) - 8.0/9*sin(14.0/9 - 22*t) - 3.0/2*sin(3.0/2 - 21*t) - 1.0/2*sin(3.0/2 - 20*t) - 77.0/8*sin(11.0/7 - 13*t) - 114.0/7*sin(11.0/7 - 9*t) - 314.0/21*sin(11.0/7 - 2*t) - 17.0/4*sin(11.0/7 -t) + 37.0/7*sin(3*t + 11.0/7) + 342.0/31*sin(4*t + 8.0/5) + 20.0/3*sin(5*t + 8.0/5) + 331.0/11*sin(6*t + 8.0/5) + 23.0/3*sin(7*t + 14.0/3) + 139.0/6*sin(8*t + 8.0/5) + 34.0/11*sin(10*t + 33.0/7) + 359.0/15*sin(11*t + 8.0/5) + 88.0/7*sin(12*t + 8.0/5) + 10.0/7*sin(14*t + 11.0/7) + 5.0/4*sin(15*t + 5.0/3) + 15.0/4*sin(16*t + 8.0/5) + 8.0/5*sin(17*t + 8.0/5) + 7.0/4*sin(18*t + 8.0/5) + 2.0/5*sin(19*t + 23.0/5) - 1008.0/5)*theta(99*PI -t)*theta(t - 95*PI) + (-13.0/8*sin(17.0/11 - 12*t) - 5.0/4*sin(11.0/7 - 11*t) - 3.0/2*sin(3.0/2 - 10*t) - 35.0/6*sin(11.0/7 - 8*t) - 32.0/9*sin(11.0/7 - 6*t) - 49.0/9*sin(14.0/9 - 5*t) - 129.0/10*sin(11.0/7 - 4*t) - 472.0/5*sin(11.0/7 - 2*t) - 149.0/2*sin(11.0/7 -t) + 95.0/3*sin(3*t + 11.0/7) + 5.0/2*sin(7*t + 14.0/9) + 4.0/7*sin(9*t + 13.0/9) + 989.0/3)*theta(95*PI -t)*theta(t - 91*PI) + (-25.0/12*sin(11.0/7 - 9*t) - 37.0/7*sin(11.0/7 - 5*t) + 159.0/11*sin(t + 8.0/5) + 659.0/8*sin(2*t + 11.0/7) +sin(3*t + 37.0/8) + 97.0/3*sin(4*t + 8.0/5) + 55.0/9*sin(6*t + 11.0/7) + 11.0/8*sin(7*t + 33.0/7) + 49.0/16*sin(8*t + 11.0/7) + 1.0/3*sin(10*t + 13.0/9) + 4.0/5*sin(11*t + 14.0/3) + 26.0/9*sin(12*t + 8.0/5) - 4025.0/8)*theta(91*PI -t)*theta(t - 87*PI) + (-215.0/7*sin(11.0/7 - 2*t) + 51.0/5*sin(t + 11.0/7) + 62.0/5*sin(3*t + 11.0/7) + 15.0/2*sin(4*t + 8.0/5) + 91.0/10*sin(5*t + 8.0/5) + 2*sin(6*t + 8.0/5) + 50.0/7*sin(7*t + 8.0/5) + 5.0/2*sin(8*t + 8.0/5) + 9.0/2*sin(9*t + 8.0/5) + 6.0/5*sin(10*t + 33.0/7) + 17.0/6*sin(11*t + 8.0/5) + 3.0/7*sin(12*t + 14.0/3) - 181.0/14)*theta(87*PI -t)*theta(t - 83*PI) + (-21.0/5*sin(11.0/7 - 9*t) - 61.0/8*sin(11.0/7 - 3*t) - 272.0/7*sin(11.0/7 - 2*t) + 961.0/7*sin(t + 11.0/7) + 19.0/3*sin(4*t + 33.0/7) + 24.0/5*sin(5*t + 11.0/7) + 1.0/8*sin(6*t + 4.0/3) + 19.0/5*sin(7*t + 8.0/5) + 2.0/7*sin(8*t + 33.0/7) + 1.0/12*sin(10*t + 31.0/7) + 7.0/5*sin(11*t + 11.0/7) + 1.0/2*sin(12*t + 14.0/9) - 5)*theta(83*PI -t)*theta(t - 79*PI) + (-4.0/5*sin(14.0/9 - 48*t) - 1.0/5*sin(16.0/11 - 43*t) - 1.0/2*sin(3.0/2 - 42*t) - 5.0/2*sin(3.0/2 - 29*t) - 6.0/7*sin(3.0/2 - 28*t) - 41.0/20*sin(11.0/7 - 24*t) - 21.0/4*sin(14.0/9 - 17*t) - 909.0/5*sin(11.0/7 -t) + 227.0/6*sin(2*t + 8.0/5) + 182.0/3*sin(3*t + 8.0/5) + 1469.0/14*sin(4*t + 8.0/5) + 71.0/4*sin(5*t + 8.0/5) + 61.0/6*sin(6*t + 14.0/3) + 289.0/7*sin(7*t + 8.0/5) + 37.0/6*sin(8*t + 37.0/8) + 147.0/8*sin(9*t + 33.0/7) + 74.0/3*sin(10*t + 8.0/5) + 77.0/5*sin(11*t + 33.0/7) + 33.0/8*sin(12*t + 8.0/5) + 35.0/4*sin(13*t + 13.0/8) + 51.0/4*sin(14*t + 5.0/3) + 27.0/5*sin(15*t + 12.0/7) + 33.0/8*sin(16*t + 8.0/5) + 3.0/7*sin(18*t + 15.0/4) + 31.0/5*sin(19*t + 5.0/3) + 23.0/7*sin(20*t + 23.0/5) + 34.0/5*sin(21*t + 13.0/8) + 6.0/5*sin(22*t + 13.0/3) + 19.0/5*sin(23*t + 5.0/3) + 7.0/3*sin(25*t + 8.0/5) + 6.0/7*sin(26*t + 31.0/7) + 7.0/2*sin(27*t + 5.0/3) + 8.0/9*sin(30*t + 11.0/7) + 5.0/7*sin(31*t + 9.0/2) + 29.0/15*sin(32*t + 7.0/4) + 13.0/8*sin(33*t + 7.0/4) + 1.0/7*sin(34*t + 29.0/8) + 1.0/7*sin(35*t + 40.0/9) + 1.0/4*sin(36*t + 5.0/3) + 5.0/8*sin(37*t + 14.0/3) + 2.0/5*sin(38*t + 13.0/7) + 6.0/7*sin(39*t + 5.0/3) + 1.0/4*sin(40*t + 38.0/9) +sin(41*t + 12.0/7) + 1.0/4*sin(44*t + 12.0/5) + 11.0/7*sin(45*t + 7.0/4) + 6.0/7*sin(46*t + 37.0/8) + 1.0/2*sin(47*t + 3.0/2) + 2.0/5*sin(49*t + 25.0/13) + 4.0/9*sin(50*t + 29.0/15) + 3.0/8*sin(51*t + 19.0/10) + 2.0/7*sin(52*t + 2) - 833.0/4)*theta(79*PI -t)*theta(t - 75*PI) + (-5.0/9*sin(10.0/7 - 43*t) - 1.0/3*sin(14.0/9 - 42*t) - 7.0/13*sin(17.0/11 - 40*t) - 1.0/3*sin(7.0/5 - 39*t) - 8.0/5*sin(14.0/9 - 36*t) - 5.0/8*sin(16.0/11 - 35*t) - 10.0/7*sin(14.0/9 - 32*t) - 11.0/5*sin(14.0/9 - 28*t) - 3.0/4*sin(3.0/2 - 27*t) - 1.0/5*sin(4.0/3 - 24*t) - 1.0/2*sin(7.0/5 - 23*t) - 40.0/7*sin(14.0/9 - 20*t) - 31.0/8*sin(17.0/11 - 16*t) - 46.0/9*sin(14.0/9 - 15*t) - 25.0/2*sin(14.0/9 - 12*t) - 268.0/7*sin(11.0/7 - 8*t) - 57.0/4*sin(11.0/7 - 5*t) - 1183.0/16*sin(11.0/7 - 4*t) + 382.0/5*sin(t + 11.0/7) + 21.0/2*sin(2*t + 33.0/7) + 17.0/2*sin(3*t + 33.0/7) + 181.0/10*sin(6*t + 8.0/5) + 26.0/7*sin(7*t + 11.0/7) + 174.0/7*sin(9*t + 8.0/5) + 57.0/7*sin(10*t + 8.0/5) + 164.0/11*sin(11*t + 8.0/5) + 33.0/7*sin(13*t + 8.0/5) + 25.0/13*sin(14*t + 5.0/3) + 4.0/7*sin(17*t + 14.0/3) + 1.0/2*sin(18*t + 35.0/8) + 13.0/4*sin(21*t + 8.0/5) + 9.0/4*sin(22*t + 5.0/3) + 1.0/2*sin(25*t + 3.0/2) + 4.0/3*sin(26*t + 33.0/7) + 10.0/7*sin(29*t + 8.0/5) + 1.0/12*sin(30*t + 12.0/5) + 1.0/14*sin(31*t + 19.0/9) + 1.0/14*sin(33*t + 13.0/8) + 2.0/7*sin(34*t + 23.0/5) + 10.0/11*sin(37*t + 8.0/5) + 1.0/9*sin(38*t + 11.0/6) + 2.0/5*sin(41*t + 12.0/7) + 2.0/5*sin(44*t + 33.0/7) + 3.0/8*sin(45*t + 7.0/4) + 2285.0/9)*theta(75*PI -t)*theta(t - 71*PI) + (-3.0/8*sin(11.0/7 - 44*t) - 1.0/15*sin(5.0/7 - 33*t) - 47.0/8*sin(11.0/7 - 12*t) - 11.0/3*sin(11.0/7 - 8*t) + 236.0/7*sin(t + 11.0/7) + 328.0/7*sin(2*t + 33.0/7) + 291.0/7*sin(3*t + 11.0/7) + 484.0/21*sin(4*t + 33.0/7) + 39.0/4*sin(5*t + 14.0/3) + 289.0/8*sin(6*t + 33.0/7) + 374.0/15*sin(7*t + 14.0/3) + 92.0/3*sin(9*t + 11.0/7) + 153.0/7*sin(10*t + 33.0/7) + 26.0/5*sin(11*t + 13.0/8) + 62.0/7*sin(13*t + 3.0/2) + 41.0/4*sin(14*t + 11.0/7) + 31.0/4*sin(15*t + 33.0/7) + 13.0/8*sin(16*t + 3.0/2) + 49.0/8*sin(17*t + 11.0/7) + 139.0/14*sin(18*t + 14.0/3) + 98.0/9*sin(19*t + 14.0/3) + 53.0/9*sin(20*t + 14.0/9) + 71.0/9*sin(21*t + 3.0/2) + 7.0/2*sin(22*t + 7.0/5) + 23.0/5*sin(23*t + 3.0/2) + 3.0/2*sin(24*t + 7.0/5) + 4.0/5*sin(25*t + 6.0/5) + 22.0/7*sin(26*t + 3.0/2) + 2.0/3*sin(27*t + 14.0/9) + 11.0/6*sin(28*t + 33.0/7) + 1.0/4*sin(29*t + 17.0/11) + 9.0/7*sin(30*t + 16.0/11) + 23.0/22*sin(31*t + 10.0/7) + 5.0/6*sin(32*t + 13.0/9) + 1.0/3*sin(34*t + 16.0/11) + 3.0/8*sin(35*t + 9.0/7) + 6.0/7*sin(36*t + 7.0/5) + 16.0/11*sin(37*t + 10.0/7) + 3.0/7*sin(38*t + 9.0/7) + 13.0/14*sin(39*t + 7.0/5) + 13.0/14*sin(40*t + 7.0/5) + 5.0/6*sin(41*t + 7.0/5) + 5.0/6*sin(42*t + 10.0/7) + 5.0/7*sin(43*t + 7.0/5) + 2.0/5*sin(45*t + 10.0/7) + 16.0/17*sin(46*t + 7.0/5) + 178)*theta(71*PI -t)*theta(t - 67*PI) + (-44.0/7*sin(11.0/7 - 14*t) - 26.0/7*sin(14.0/9 - 10*t) - 83.0/21*sin(17.0/11 -t) + 135.0/2*sin(2*t + 11.0/7) + 5.0/4*sin(3*t + 12.0/7) + 251.0/7*sin(4*t + 33.0/7) + 941.0/11*sin(5*t + 33.0/7) + 146.0/5*sin(6*t + 33.0/7) + 73.0/7*sin(7*t + 14.0/3) + 9.0/5*sin(8*t + 8.0/5) + 223.0/14*sin(9*t + 14.0/9) + 35.0/2*sin(11*t + 14.0/9) + 173.0/7*sin(12*t + 14.0/9) + 34.0/11*sin(13*t + 14.0/3) + 131.0/13*sin(15*t + 11.0/7) + 23.0/7*sin(16*t + 11.0/7) + 5.0/7*sin(17*t + 12.0/7) + 77.0/5*sin(18*t + 14.0/3) + 81.0/7*sin(19*t + 14.0/9) + 29.0/4*sin(20*t + 3.0/2) + 38.0/3*sin(21*t + 3.0/2) + 16.0/7*sin(22*t + 13.0/9) + 145.0/36*sin(23*t + 14.0/9) + 35.0/8*sin(24*t + 3.0/2) + 17.0/4*sin(25*t + 14.0/3) + 32.0/3*sin(26*t + 3.0/2) + 1.0/7*sin(27*t + 7.0/5) + 27.0/8*sin(28*t + 14.0/3) + 15.0/7*sin(29*t + 17.0/11) + 5.0/3*sin(30*t + 37.0/8) + 26.0/5*sin(31*t + 3.0/2) + 12.0/7*sin(32*t + 3.0/2) + 13.0/6*sin(33*t + 14.0/3) + 7.0/4*sin(34*t + 11.0/7) + 3.0/2*sin(35*t + 3.0/2) + 8.0/5*sin(36*t + 14.0/3) + 7.0/4*sin(37*t + 3.0/2) + 5.0/11*sin(38*t + 4.0/3) + 3.0/8*sin(39*t + 22.0/5) + 4.0/5*sin(40*t + 14.0/3) + 18.0/19*sin(41*t + 23.0/5) + 14.0/5*sin(42*t + 3.0/2) + 5.0/4*sin(43*t + 14.0/3) + 3.0/8*sin(44*t + 3.0/2) +sin(45*t + 3.0/2) - 3863.0/14)*theta(67*PI -t)*theta(t - 63*PI) + (-45.0/8*sin(11.0/7 - 35*t) - 3.0/8*sin(5.0/9 - 32*t) - 19.0/3*sin(3.0/2 - 31*t) - 27.0/4*sin(11.0/7 - 29*t) - 54.0/7*sin(14.0/9 - 27*t) - 1.0/5*sin(1 - 25*t) - 7.0/6*sin(3.0/2 - 23*t) - 89.0/8*sin(14.0/9 - 22*t) - 85.0/6*sin(14.0/9 - 20*t) - 21.0/2*sin(17.0/11 - 17*t) - 209.0/8*sin(11.0/7 - 15*t) - 502.0/5*sin(11.0/7 - 4*t) - 3361.0/13*sin(11.0/7 -t) + 1303.0/8*sin(2*t + 11.0/7) + 1495.0/7*sin(3*t + 11.0/7) + 4.0/5*sin(5*t + 3.0/2) + 467.0/6*sin(6*t + 8.0/5) + 207.0/7*sin(7*t + 11.0/7) + 128.0/5*sin(8*t + 11.0/7) + 101.0/4*sin(9*t + 11.0/7) + 158.0/7*sin(10*t + 8.0/5) + 323.0/23*sin(11*t + 8.0/5) + 53.0/13*sin(12*t + 11.0/7) + 98.0/9*sin(13*t + 33.0/7) + 13.0/2*sin(14*t + 33.0/7) + 91.0/6*sin(16*t + 8.0/5) + 7.0/3*sin(18*t + 10.0/7) + 100.0/7*sin(19*t + 8.0/5) + 8*sin(21*t + 13.0/8) + 112.0/9*sin(24*t + 8.0/5) + 10.0/11*sin(26*t + 11.0/8) + 183.0/26*sin(28*t + 8.0/5) + 17.0/5*sin(30*t + 8.0/5) + 19.0/4*sin(33*t + 8.0/5) + 8.0/7*sin(34*t + 14.0/3) + 32.0/7*sin(36*t + 14.0/3) + 8.0/7*sin(37*t + 23.0/5) + 33.0/5*sin(38*t + 8.0/5) + 24.0/5*sin(39*t + 11.0/7) + 69.0/17*sin(40*t + 11.0/7) + 6.0/11*sin(41*t + 11.0/7) - 464.0/9)*theta(63*PI -t)*theta(t - 59*PI) + (-1.0/3*sin(3.0/2 - 11*t) - 4.0/9*sin(14.0/9 - 10*t) - 1.0/8*sin(10.0/7 - 7*t) - 7.0/5*sin(11.0/7 - 6*t) - 22.0/5*sin(11.0/7 - 4*t) - 47.0/12*sin(11.0/7 - 3*t) + 12.0/7*sin(t + 8.0/5) + 4.0/3*sin(2*t + 11.0/7) + 4.0/3*sin(5*t + 11.0/7) + 1.0/14*sin(8*t + 23.0/5) + 6.0/11*sin(9*t + 8.0/5) - 929.0/11)*theta(59*PI -t)*theta(t - 55*PI) + (-2.0/5*sin(11.0/7 - 6*t) + 15.0/7*sin(t + 11.0/7) + 3.0/8*sin(2*t + 14.0/3) + 16.0/7*sin(3*t + 33.0/7) + 40.0/7*sin(4*t + 33.0/7) + 9.0/7*sin(5*t + 8.0/5) + 1.0/18*sin(7*t + 3.0/2) + 1.0/2*sin(8*t + 11.0/7) + 1.0/32*sin(9*t + 8.0/7) + 1.0/6*sin(10*t + 23.0/5) + 2.0/7*sin(11*t + 14.0/3) + 2.0/7*sin(12*t + 33.0/7) - 91.0/2)*theta(55*PI -t)*theta(t - 51*PI) + (-1.0/32*sin(14.0/9 - 12*t) - 1.0/6*sin(11.0/7 - 10*t) - 1.0/19*sin(3.0/2 - 9*t) - 1.0/3*sin(11.0/7 - 8*t) - 1.0/9*sin(14.0/9 - 7*t) - 3.0/7*sin(11.0/7 - 6*t) -sin(11.0/7 - 4*t) - 35.0/9*sin(11.0/7 - 2*t) + 9.0/7*sin(t + 11.0/7) + 1.0/4*sin(3*t + 11.0/7) + 1.0/3*sin(5*t + 11.0/7) + 1.0/19*sin(11*t + 11.0/7) - 49.0/2)*theta(51*PI -t)*theta(t - 47*PI) + (-1.0/32*sin(1.0/4 - 12*t) - 1.0/10*sin(1.0/14 - 9*t) - 1.0/12*sin(5.0/4 - 7*t) - 1.0/4*sin(9.0/8 - 5*t) + 1.0/19*sin(11*t) + 6.0/5*sin(t + 7.0/5) + 23.0/6*sin(2*t + 3.0/2) + 9.0/10*sin(3*t + 6.0/5) + 11.0/8*sin(4*t + 7.0/5) + 2.0/5*sin(6*t + 3.0/2) + 1.0/5*sin(8*t + 6.0/5) + 1.0/4*sin(10*t + 9.0/7) - 316.0/3)*theta(47*PI -t)*theta(t - 43*PI) + (-1.0/15*sin(10.0/7 - 6*t) - 1.0/8*sin(3.0/2 - 4*t) - 1.0/3*sin(3.0/2 - 2*t) + 476.0/9*sin(t + 11.0/7) + 28.0/5*sin(3*t + 11.0/7) + 35.0/18*sin(5*t + 11.0/7) + 15.0/16*sin(7*t + 11.0/7) + 3.0/5*sin(9*t + 11.0/7) + 1.0/41*sin(10*t + 8.0/5) + 4.0/9*sin(11*t + 11.0/7) - 430.0/7)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/5*sin(3.0/5 - 9*t) - 2.0/3*sin(13.0/14 - 2*t) + 6.0/7*sin(t + 29.0/8) + 1.0/5*sin(3*t + 1) + 25.0/12*sin(4*t + 8.0/5) + 8.0/3*sin(5*t + 22.0/5) + 31.0/10*sin(6*t + 9.0/2) + 12.0/7*sin(7*t + 1.0/20) + 37.0/19*sin(8*t + 31.0/7) + 13.0/14*sin(10*t + 19.0/6) + 3.0/5*sin(11*t + 3.0/4) + 1.0/7*sin(12*t + 13.0/3) + 253.0/6)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/13*sin(3.0/2 - 12*t) - 5.0/8*sin(7.0/8 - 10*t) - 18.0/19*sin(7.0/6 - 7*t) - 3.0/8*sin(25.0/24 - 2*t) + 4.0/5*sin(t + 11.0/5) + 15.0/14*sin(3*t + 23.0/9) + 34.0/11*sin(4*t + 9.0/2) + 47.0/12*sin(5*t + 7.0/2) + 3.0/4*sin(6*t + 53.0/18) + 6.0/5*sin(8*t + 3.0/4) + 7.0/6*sin(9*t + 29.0/10) + 1.0/3*sin(11*t + 33.0/17) - 879.0/5)*theta(35*PI -t)*theta(t - 31*PI) + (75.0/4*sin(t + 9.0/8) + 6.0/5*sin(2*t + 22.0/5) + 7.0/8*sin(3*t + 1.0/3) + 5.0/7*sin(4*t + 31.0/8) + 1.0/3*sin(5*t + 28.0/27) + 1.0/3*sin(6*t + 7.0/2) + 312.0/7)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/10*sin(1.0/5 - 5*t) - 2.0/7*sin(1.0/2 - 2*t) + 98.0/5*sin(t + 9.0/8) + 6.0/5*sin(3*t + 3.0/5) + 1.0/3*sin(4*t + 49.0/11) + 1.0/8*sin(6*t + 25.0/6) + 1.0/5*sin(7*t + 9.0/5) - 1589.0/9)*theta(27*PI -t)*theta(t - 23*PI) + (-4.0/5*sin(5.0/7 - 10*t) - 21.0/10*sin(19.0/20 - 6*t) - 83.0/4*sin(7.0/5 - 2*t) + 3*sin(t + 12.0/7) + 15.0/14*sin(3*t + 2) + 5.0/8*sin(4*t + 25.0/13) + 11.0/10*sin(5*t + 23.0/12) + 1.0/2*sin(7*t + 19.0/9) + 1.0/4*sin(8*t + 13.0/5) + 3.0/7*sin(9*t + 19.0/8) + 1.0/17*sin(11*t + 13.0/5) + 1.0/7*sin(12*t + 14.0/3) - 17)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/6*sin(3.0/8 - 17*t) - 1.0/4*sin(2.0/5 - 13*t) - 5.0/9*sin(3.0/4 - 9*t) - 4.0/3*sin(6.0/5 - 5*t) - 1.0/4*sin(20.0/19 - 4*t) + 19.0/3*sin(t + 50.0/11) + 63.0/4*sin(2*t + 11.0/6) + 10.0/9*sin(3*t + 20.0/7) + 6.0/5*sin(6*t + 7.0/3) + 5.0/11*sin(7*t + 23.0/7) + 1.0/9*sin(8*t + 21.0/11) + 2.0/7*sin(10*t + 5.0/2) + 2.0/7*sin(11*t + 19.0/5) + 1.0/6*sin(12*t + 19.0/7) + 1.0/8*sin(14*t + 2) + 1.0/6*sin(15*t + 9.0/2) + 1.0/7*sin(16*t + 13.0/4) - 544.0/5)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/40*sin(7.0/5 - 15*t) - 1.0/8*sin(3.0/5 - 11*t) - 1.0/5*sin(1.0/3 - 5*t) -sin(7.0/8 - 3*t) + 7.0/8*sin(t + 21.0/8) + 237.0/4*sin(2*t + 11.0/7) + 1.0/2*sin(4*t + 16.0/7) + 54.0/7*sin(6*t + 3.0/2) + 1.0/6*sin(7*t + 7.0/4) + 1.0/7*sin(8*t + 22.0/9) + 1.0/11*sin(9*t + 3.0/4) + 14.0/5*sin(10*t + 7.0/5) + 1.0/6*sin(12*t + 40.0/9) + 1.0/16*sin(13*t + 5.0/6) + 9.0/7*sin(14*t + 7.0/5) + 1.0/16*sin(16*t + 9.0/4) + 1.0/14*sin(17*t + 7.0/5) + 301.0/15)*theta(15*PI -t)*theta(t - 11*PI) + (5*sin(t + 13.0/6) + 297.0/5*sin(2*t + 10.0/7) + 19.0/18*sin(3*t + 21.0/5) + 1.0/4*sin(4*t + 3) + 2.0/3*sin(5*t + 6.0/5) + 31.0/4*sin(6*t + 5.0/4) + 6.0/7*sin(7*t + 29.0/7) + 2.0/7*sin(8*t + 5.0/4) + 2.0/7*sin(9*t + 33.0/16) + 11.0/4*sin(10*t + 10.0/11) + 3.0/5*sin(11*t + 11.0/3) + 2.0/7*sin(12*t + 8.0/5) + 1.0/4*sin(13*t + 4.0/5) + 7.0/5*sin(14*t + 3.0/4) + 2.0/5*sin(15*t + 15.0/4) + 1.0/5*sin(16*t + 9.0/8) - 1114.0/7)*theta(11*PI -t)*theta(t - 7*PI) + (-2.0/5*sin(10.0/9 - 12*t) - 5.0/7*sin(7.0/6 - 10*t) + 274.0/5*sin(t + 5.0/3) +sin(2*t + 43.0/11) + 23.0/8*sin(3*t + 16.0/9) + 13.0/9*sin(4*t + 15.0/4) + 37.0/36*sin(5*t + 2) + 21.0/20*sin(6*t + 29.0/7) + 3.0/4*sin(7*t + 14.0/5) + 4.0/5*sin(8*t + 14.0/3) + 4.0/7*sin(9*t + 27.0/8) + 1.0/6*sin(11*t + 17.0/5) - 450.0/7)*theta(7*PI -t)*theta(t - 3*PI) + (-6.0/5*sin(2.0/9 - 9*t) - 38.0/5*sin(1.0/9 - 5*t) - 31.0/5*sin(1.0/6 - 3*t) + 5888.0/29*sin(t + 8.0/5) + 176.0/25*sin(2*t + 9.0/2) + 19.0/4*sin(4*t + 11.0/4) + 62.0/9*sin(6*t + 9.0/5) + 12.0/11*sin(7*t + 1.0/4) + 16.0/5*sin(8*t + 21.0/8) + 10.0/7*sin(10*t + 11.0/7) + 7.0/8*sin(11*t + 5.0/7) + 4.0/9*sin(12*t + 43.0/11) + 14.0/15*sin(13*t + 7.0/6) + 4.0/7*sin(14*t + 71.0/18) + 4.0/5*sin(15*t + 7.0/5) + 3.0/5*sin(16*t + 27.0/7) + 11.0/12*sin(17*t + 3.0/4) + 1.0/4*sin(18*t + 23.0/8) + 1.0/2*sin(19*t + 42.0/41) - 1756.0/27)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((-25.0/7*sin(11.0/7 -t) + 4.0/3*sin(2*t + 14.0/3) + 19.0/5*sin(3*t + 33.0/7) + 16.0/7*sin(4*t + 33.0/7) + 39.0/7*sin(5*t + 14.0/3) + 11.0/4*sin(6*t + 33.0/7) + 8.0/5*sin(7*t + 14.0/3) + 21.0/5*sin(8*t + 14.0/3) + 5.0/4*sin(9*t + 11.0/7) + 31.0/8*sin(10*t + 14.0/3) + 17.0/8*sin(11*t + 11.0/7) + 1.0/6*sin(12*t + 7.0/8) + 8.0/7*sin(13*t + 8.0/5) + 8.0/3*sin(14*t + 3.0/2) + 51.0/13*sin(15*t + 3.0/2) + 15.0/7*sin(16*t + 14.0/3) + 7.0/4*sin(17*t + 17.0/11) + 15.0/14*sin(18*t + 13.0/9) + 1.0/3*sin(19*t + 35.0/8) + 1.0/5*sin(20*t + 7.0/5) + 6.0/11*sin(21*t + 11.0/7) + 8.0/7*sin(23*t + 13.0/9) + 1.0/5*sin(24*t + 13.0/8) + 5.0/4*sin(25*t + 13.0/9) + 269.0/9)*theta(103*PI -t)*theta(t - 99*PI) + (-1.0/2*sin(14.0/9 - 24*t) - 5.0/6*sin(3.0/2 - 23*t) - 13.0/5*sin(14.0/9 - 22*t) - 1.0/4*sin(11.0/7 - 20*t) - 5.0/7*sin(17.0/11 - 19*t) - 1.0/6*sin(9.0/7 - 18*t) - 18.0/7*sin(14.0/9 - 17*t) - 5.0/9*sin(16.0/11 - 16*t) - 2.0/7*sin(13.0/9 - 15*t) - 5.0/4*sin(11.0/7 - 14*t) - 16.0/5*sin(11.0/7 - 12*t) - 20.0/7*sin(14.0/9 - 11*t) - 1.0/2*sin(11.0/7 - 10*t) - 8.0/3*sin(11.0/7 - 8*t) - 15.0/8*sin(11.0/7 - 5*t) - 3*sin(11.0/7 - 3*t) - 2.0/3*sin(11.0/7 - 2*t) + 5.0/4*sin(t + 33.0/7) + 19.0/10*sin(4*t + 11.0/7) + 1.0/9*sin(6*t + 7.0/4) + 37.0/19*sin(7*t + 11.0/7) + 26.0/7*sin(9*t + 8.0/5) + 3*sin(13*t + 8.0/5) + 4.0/3*sin(21*t + 8.0/5) + 85.0/3)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/3*sin(7.0/5 - 12*t) - 7.0/13*sin(11.0/7 - 10*t) - 12.0/5*sin(11.0/7 - 9*t) - 52.0/7*sin(11.0/7 - 7*t) - 13.0/3*sin(11.0/7 - 6*t) - 38.0/7*sin(14.0/9 - 4*t) - 333.0/7*sin(11.0/7 - 3*t) - 145.0/8*sin(11.0/7 - 2*t) - 773.0/13*sin(11.0/7 -t) + 61.0/7*sin(5*t + 11.0/7) + 4.0/3*sin(8*t + 3.0/2) + 5.0/6*sin(11*t + 14.0/9) - 4114.0/9)*theta(95*PI -t)*theta(t - 91*PI) + (-7.0/2*sin(14.0/9 - 12*t) - 19.0/18*sin(3.0/2 - 11*t) - 65.0/7*sin(11.0/7 - 8*t) - 11.0/2*sin(14.0/9 - 7*t) - 14.0/5*sin(11.0/7 - 6*t) - 6*sin(11.0/7 - 5*t) - 503.0/12*sin(11.0/7 - 4*t) - 303.0/16*sin(11.0/7 - 3*t) + 43.0/4*sin(t + 33.0/7) + 405.0/4*sin(2*t + 8.0/5) + 1.0/24*sin(9*t + 5.0/2) + 3.0/2*sin(10*t + 5.0/3) - 7090.0/17)*theta(91*PI -t)*theta(t - 87*PI) + (-63.0/16*sin(11.0/7 - 3*t) - 536.0/7*sin(11.0/7 - 2*t) - 4.0/5*sin(10.0/7 -t) + 17*sin(4*t + 11.0/7) + 8.0/5*sin(5*t + 33.0/7) + 8.0/5*sin(6*t + 8.0/5) + 7.0/5*sin(7*t + 33.0/7) + 77.0/9*sin(8*t + 8.0/5) + 1.0/14*sin(9*t + 11.0/5) + 6.0/7*sin(10*t + 8.0/5) + 1.0/9*sin(11*t + 5.0/3) + 12.0/7*sin(12*t + 8.0/5) - 2473.0/5)*theta(87*PI -t)*theta(t - 83*PI) + (-16.0/5*sin(14.0/9 - 7*t) - 29.0/2*sin(11.0/7 - 3*t) + 421.0/5*sin(t + 11.0/7) + 2269.0/21*sin(2*t + 11.0/7) + 118.0/7*sin(4*t + 8.0/5) + 28.0/3*sin(5*t + 8.0/5) + 17.0/5*sin(6*t + 11.0/7) + 43.0/6*sin(8*t + 8.0/5) + 1.0/6*sin(9*t + 23.0/5) + 20.0/7*sin(10*t + 8.0/5) + 1.0/7*sin(11*t + 19.0/10) + 17.0/9*sin(12*t + 8.0/5) - 3391.0/7)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/8*sin(1.0/2 - 52*t) - 1.0/11*sin(5.0/7 - 51*t) - 2.0/3*sin(4.0/3 - 49*t) - 5.0/4*sin(7.0/5 - 48*t) - 5.0/9*sin(3.0/2 - 46*t) - 1.0/8*sin(7.0/5 - 43*t) - 3.0/7*sin(7.0/5 - 42*t) - 7.0/8*sin(9.0/7 - 41*t) - 2.0/7*sin(1 - 40*t) - 8.0/7*sin(7.0/5 - 36*t) - 1.0/3*sin(1 - 35*t) - 13.0/5*sin(3.0/2 - 34*t) - 6.0/5*sin(10.0/7 - 32*t) - 12.0/13*sin(17.0/11 - 31*t) - 3.0/5*sin(3.0/2 - 29*t) - 3.0/2*sin(7.0/5 - 28*t) - 15.0/14*sin(11.0/8 - 27*t) - 4.0/5*sin(7.0/5 - 26*t) - 15.0/4*sin(3.0/2 - 24*t) - 29.0/14*sin(13.0/9 - 22*t) - 22.0/5*sin(10.0/7 - 21*t) - 30.0/7*sin(3.0/2 - 20*t) - 2.0/5*sin(10.0/11 - 18*t) - 5*sin(3.0/2 - 17*t) - 76.0/3*sin(3.0/2 - 14*t) - 63.0/4*sin(11.0/7 - 10*t) - 128.0/5*sin(11.0/7 - 7*t) - 82.0/7*sin(14.0/9 - 6*t) - 394.0/3*sin(11.0/7 -t) + 137.0/2*sin(2*t + 8.0/5) + 2646.0/23*sin(3*t + 8.0/5) + 215.0/3*sin(4*t + 8.0/5) + 33.0/2*sin(5*t + 8.0/5) + 201.0/40*sin(8*t + 5.0/3) + 166.0/9*sin(9*t + 8.0/5) + 104.0/5*sin(11*t + 8.0/5) + 43.0/8*sin(12*t + 14.0/3) + 26.0/5*sin(13*t + 16.0/11) + 12.0/5*sin(15*t + 10.0/7) + 47.0/8*sin(16*t + 8.0/5) + 3*sin(19*t + 11.0/7) + 29.0/8*sin(23*t + 8.0/5) + 7.0/8*sin(25*t + 4.0/3) + 24.0/7*sin(30*t + 5.0/3) + 14.0/9*sin(33*t + 14.0/9) + 19.0/18*sin(37*t + 11.0/7) + 1.0/6*sin(38*t + 32.0/7) + 1.0/2*sin(39*t + 14.0/9) + 2.0/7*sin(44*t + 5.0/3) + 1.0/5*sin(45*t + 7.0/5) + 3.0/4*sin(47*t + 11.0/7) + 3.0/8*sin(50*t + 13.0/9) + 266)*theta(79*PI -t)*theta(t - 75*PI) + (-13.0/12*sin(17.0/11 - 43*t) -sin(11.0/7 - 42*t) - 9.0/7*sin(17.0/11 - 40*t) - 5.0/8*sin(11.0/7 - 36*t) - 3.0/5*sin(16.0/11 - 35*t) - 2.0/3*sin(11.0/7 - 34*t) - 25.0/13*sin(17.0/11 - 32*t) - 5.0/9*sin(13.0/9 - 24*t) - 4.0/5*sin(14.0/9 - 21*t) - 2.0/5*sin(3.0/2 - 20*t) - 23.0/5*sin(11.0/7 - 19*t) - 17.0/4*sin(11.0/7 - 18*t) - 27.0/2*sin(11.0/7 - 16*t) - 89.0/7*sin(11.0/7 - 13*t) - 72.0/7*sin(11.0/7 - 12*t) - 96.0/7*sin(11.0/7 - 11*t) - 61.0/12*sin(11.0/7 - 10*t) - 27.0/2*sin(11.0/7 - 8*t) - 124.0/7*sin(11.0/7 - 5*t) - 829.0/7*sin(11.0/7 - 3*t) - 866.0/5*sin(11.0/7 - 2*t) - 511.0/3*sin(11.0/7 -t) + 1039.0/8*sin(4*t + 8.0/5) + 224.0/15*sin(6*t + 8.0/5) + 59.0/4*sin(7*t + 8.0/5) + 33.0/4*sin(9*t + 8.0/5) + 67.0/8*sin(14*t + 33.0/7) + 52.0/7*sin(15*t + 33.0/7) + 9.0/7*sin(17*t + 37.0/8) + 12.0/11*sin(22*t + 8.0/5) + 7.0/6*sin(23*t + 14.0/9) + 43.0/14*sin(25*t + 8.0/5) + 3.0/5*sin(26*t + 8.0/5) + 2.0/5*sin(27*t + 4.0/3) + 4.0/7*sin(28*t + 11.0/7) + 3.0/4*sin(29*t + 8.0/5) + 1.0/5*sin(30*t + 23.0/5) + 3.0/7*sin(31*t + 8.0/5) + 5.0/7*sin(33*t + 5.0/3) + 1.0/4*sin(37*t + 17.0/11) + 1.0/5*sin(38*t + 23.0/5) + 1.0/6*sin(39*t + 10.0/7) + 2.0/5*sin(41*t + 5.0/3) + 3.0/5*sin(44*t + 33.0/7) + 3.0/5*sin(45*t + 14.0/3) + 333.0/4)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/8*sin(15.0/14 - 44*t) - 2.0/9*sin(4.0/3 - 32*t) - 13.0/3*sin(11.0/7 - 18*t) - 1.0/4*sin(11.0/9 - 16*t) - 86.0/3*sin(11.0/7 - 3*t) - 767.0/4*sin(11.0/7 -t) + 761.0/3*sin(2*t + 11.0/7) + 80.0/3*sin(4*t + 33.0/7) + 191.0/5*sin(5*t + 33.0/7) + 225.0/11*sin(6*t + 14.0/3) + 103.0/3*sin(7*t + 14.0/3) + 220.0/7*sin(8*t + 14.0/3) + 22.0/3*sin(9*t + 8.0/5) + 53.0/8*sin(10*t + 33.0/7) + 29.0/10*sin(11*t + 23.0/5) + 66.0/5*sin(12*t + 14.0/3) + 5*sin(13*t + 8.0/5) + 7.0/8*sin(14*t + 11.0/8) + 35.0/8*sin(15*t + 11.0/7) + 44.0/9*sin(17*t + 11.0/7) +sin(19*t + 7.0/4) + 32.0/11*sin(20*t + 14.0/3) + 18.0/7*sin(21*t + 11.0/7) + 19.0/5*sin(22*t + 14.0/3) + 8*sin(23*t + 37.0/8) + 35.0/6*sin(24*t + 37.0/8) + 18.0/5*sin(25*t + 14.0/9) + 8.0/5*sin(26*t + 7.0/5) + 15.0/8*sin(27*t + 14.0/9) + 23.0/8*sin(28*t + 14.0/3) + 6.0/11*sin(29*t + 23.0/5) + 2.0/7*sin(30*t + 5.0/4) + 16.0/5*sin(31*t + 3.0/2) + 5.0/7*sin(33*t + 9.0/2) + 9.0/5*sin(34*t + 23.0/5) + 1.0/7*sin(35*t + 25.0/13) + 2.0/7*sin(36*t + 4.0/3) + 3.0/7*sin(37*t + 11.0/7) + 16.0/15*sin(38*t + 14.0/3) + 1.0/5*sin(39*t + 5.0/3) + 1.0/5*sin(40*t + 35.0/8) + 5.0/4*sin(41*t + 23.0/5) + 5.0/8*sin(42*t + 32.0/7) + 5.0/7*sin(43*t + 14.0/9) + 1.0/25*sin(45*t + 31.0/7) + 1.0/3*sin(46*t + 11.0/7) - 172)*theta(71*PI -t)*theta(t - 67*PI) + (-4.0/5*sin(3.0/2 - 40*t) - 1.0/7*sin(7.0/5 - 35*t) - 1.0/9*sin(1.0/14 - 31*t) - 32.0/7*sin(14.0/9 - 18*t) - 1.0/4*sin(7.0/6 - 10*t) + 1.0/3*sin(16*t) + 627.0/2*sin(t + 11.0/7) + 124.0/5*sin(2*t + 11.0/7) + 497.0/9*sin(3*t + 33.0/7) + 244.0/3*sin(4*t + 33.0/7) + 412.0/3*sin(5*t + 33.0/7) + 199.0/5*sin(6*t + 11.0/7) + 3*sin(7*t + 11.0/7) + 223.0/5*sin(8*t + 33.0/7) + 157.0/6*sin(9*t + 11.0/7) + 7.0/3*sin(11*t + 13.0/8) + 126.0/5*sin(12*t + 33.0/7) + 72.0/7*sin(13*t + 11.0/7) + 51.0/4*sin(14*t + 33.0/7) + 3.0/4*sin(15*t + 13.0/3) + 54.0/5*sin(17*t + 11.0/7) + 61.0/6*sin(19*t + 11.0/7) + 29.0/5*sin(20*t + 14.0/3) + 8.0/3*sin(21*t + 14.0/3) + 5*sin(22*t + 14.0/3) + 1.0/8*sin(23*t + 39.0/11) + 4*sin(24*t + 14.0/3) + 1.0/3*sin(25*t + 22.0/5) + 31.0/9*sin(26*t + 3.0/2) + 2.0/3*sin(27*t + 23.0/5) + 19.0/8*sin(28*t + 3.0/2) + 29.0/8*sin(29*t + 3.0/2) + 19.0/6*sin(30*t + 3.0/2) + 12.0/13*sin(32*t + 23.0/5) + 13.0/7*sin(33*t + 17.0/11) + 1.0/5*sin(34*t + 12.0/7) + 5.0/7*sin(36*t + 3.0/2) + 7.0/5*sin(37*t + 14.0/3) + 11.0/3*sin(38*t + 3.0/2) + 5.0/9*sin(39*t + 8.0/5) + 12.0/5*sin(41*t + 17.0/11) + 10.0/7*sin(42*t + 10.0/7) + 11.0/7*sin(43*t + 3.0/2) + 11.0/5*sin(44*t + 14.0/3) + 5.0/2*sin(45*t + 3.0/2) - 319.0/2)*theta(67*PI -t)*theta(t - 63*PI) + (-7.0/5*sin(7.0/5 - 41*t) - 6.0/5*sin(14.0/9 - 39*t) - 19.0/7*sin(14.0/9 - 32*t) - 22.0/5*sin(17.0/11 - 29*t) - 13.0/4*sin(3.0/2 - 27*t) - 127.0/16*sin(14.0/9 - 25*t) - 58.0/7*sin(11.0/7 - 23*t) - 17.0/2*sin(3.0/2 - 20*t) - 67.0/7*sin(11.0/7 - 17*t) - 25.0/2*sin(11.0/7 - 16*t) - 15*sin(11.0/7 - 15*t) - 10*sin(11.0/7 - 14*t) - 157.0/8*sin(11.0/7 - 13*t) - 78.0/5*sin(14.0/9 - 11*t) - 545.0/13*sin(11.0/7 - 9*t) - 731.0/7*sin(11.0/7 - 5*t) - 2139.0/13*sin(11.0/7 - 2*t) + 395.0/18*sin(t + 11.0/7) + 1473.0/5*sin(3*t + 11.0/7) + 230*sin(4*t + 11.0/7) + 31.0/4*sin(6*t + 8.0/5) + 447.0/8*sin(7*t + 33.0/7) + 58.0/5*sin(8*t + 14.0/3) + 67.0/6*sin(10*t + 14.0/9) + 9.0/7*sin(12*t + 7.0/5) + 37.0/19*sin(18*t + 14.0/3) + 3.0/5*sin(19*t + 31.0/7) + 47.0/8*sin(21*t + 33.0/7) + 9.0/4*sin(22*t + 14.0/3) + 11.0/4*sin(24*t + 33.0/7) + 2*sin(26*t + 14.0/9) + 22.0/3*sin(28*t + 8.0/5) + 23.0/9*sin(30*t + 8.0/5) + 44.0/15*sin(31*t + 33.0/7) + 10.0/3*sin(33*t + 13.0/8) + 4.0/3*sin(34*t + 14.0/9) + 13.0/7*sin(35*t + 8.0/5) + 15.0/8*sin(36*t + 14.0/3) + 24.0/7*sin(37*t + 14.0/3) + 9.0/10*sin(38*t + 23.0/5) + 25.0/6*sin(40*t + 11.0/7) - 571.0/6)*theta(63*PI -t)*theta(t - 59*PI) + (-1.0/9*sin(3.0/2 - 8*t) -sin(14.0/9 - 7*t) - 5.0/4*sin(11.0/7 - 2*t) - 1.0/3*sin(14.0/9 -t) + 11.0/5*sin(3*t + 8.0/5) + 35.0/12*sin(4*t + 8.0/5) + 1.0/2*sin(5*t + 14.0/3) + 3.0/8*sin(6*t + 11.0/7) + 2.0/7*sin(9*t + 8.0/5) + 1.0/27*sin(10*t + 11.0/6) + 1.0/3*sin(11*t + 8.0/5) - 662.0/5)*theta(59*PI -t)*theta(t - 55*PI) + (3.0/5*sin(t + 11.0/7) + 4.0/9*sin(2*t + 33.0/7) + 5.0/6*sin(3*t + 33.0/7) + 11.0/6*sin(4*t + 33.0/7) + 3.0/4*sin(5*t + 11.0/7) + 1.0/29*sin(6*t + 8.0/5) + 4.0/7*sin(7*t + 14.0/3) + 2.0/3*sin(8*t + 14.0/3) + 4.0/9*sin(10*t + 14.0/3) + 1.0/7*sin(11*t + 14.0/3) - 663.0/5)*theta(55*PI -t)*theta(t - 51*PI) + (-1.0/13*sin(11.0/7 - 11*t) - 1.0/31*sin(17.0/11 - 9*t) - 1.0/36*sin(14.0/9 - 7*t) - 1.0/6*sin(11.0/7 - 6*t) - 3.0/7*sin(11.0/7 - 4*t) - 1.0/2*sin(11.0/7 - 3*t) - 5.0/8*sin(11.0/7 - 2*t) - 148.0/11*sin(11.0/7 -t) + 1.0/13*sin(5*t + 33.0/7) - 830.0/7)*theta(51*PI -t)*theta(t - 47*PI) + (-1.0/27*sin(4.0/3 - 9*t) - 1.0/19*sin(4.0/3 - 7*t) + 67.0/5*sin(t + 14.0/3) + 9.0/7*sin(2*t + 11.0/6) + 2.0/7*sin(3*t + 9.0/7) + 6.0/11*sin(4*t + 1) + 1.0/6*sin(5*t + 23.0/5) + 1.0/7*sin(6*t + 14.0/5) + 1.0/19*sin(8*t + 3.0/8) + 1.0/14*sin(10*t + 5.0/3) + 1.0/15*sin(11*t + 14.0/15) + 1.0/12*sin(12*t + 3.0/4) - 124)*theta(47*PI -t)*theta(t - 43*PI) + (-1.0/17*sin(11.0/7 - 11*t) - 1.0/9*sin(11.0/7 - 9*t) + 4.0/7*sin(t + 11.0/7) + 10.0/11*sin(2*t + 11.0/7) + 3.0/4*sin(3*t + 11.0/7) + 8.0/5*sin(4*t + 11.0/7) + 6.0/11*sin(5*t + 11.0/7) + 12.0/13*sin(6*t + 11.0/7) + 1.0/13*sin(7*t + 14.0/9) + 1.0/5*sin(8*t + 11.0/7) + 1.0/6*sin(10*t + 8.0/5) + 1.0/8*sin(12*t + 8.0/5) - 1225.0/6)*theta(43*PI -t)*theta(t - 39*PI) + (-1.0/36*sin(11.0/10 - 12*t) - 2.0/7*sin(7.0/5 - 9*t) - 15.0/8*sin(1.0/6 - 8*t) - 8.0/3*sin(2.0/7 - 6*t) - 16.0/7*sin(3.0/5 - 5*t) + 8.0/5*sin(t + 10.0/3) + 4.0/9*sin(2*t + 7.0/4) + 5.0/4*sin(3*t + 1.0/7) + 8.0/5*sin(4*t + 19.0/6) + 51.0/25*sin(7*t + 7.0/4) + 6.0/7*sin(10*t + 9.0/2) + 5.0/7*sin(11*t + 19.0/7) + 56.0/3)*theta(39*PI -t)*theta(t - 35*PI) + (-3.0/5*sin(7.0/5 - 9*t) - 24.0/7*sin(7.0/6 - 5*t) - 11.0/5*sin(1.0/4 - 4*t) - 3.0/7*sin(4.0/3 - 2*t) + 1.0/3*sin(t + 17.0/7) + 2.0/5*sin(3*t + 15.0/4) + 1.0/4*sin(6*t + 10.0/3) + 6.0/5*sin(7*t + 1.0/6) + 14.0/15*sin(8*t + 23.0/9) + 2.0/5*sin(10*t + 3.0/4) + 2.0/7*sin(11*t + 12.0/7) + 1.0/6*sin(12*t + 29.0/7) + 115.0/7)*theta(35*PI -t)*theta(t - 31*PI) + (-3.0/5*sin(1.0/16 - 5*t) - 10.0/7*sin(5.0/7 - 3*t) - 110.0/7*sin(2.0/7 -t) + 16.0/15*sin(2*t + 8.0/3) + 17.0/18*sin(4*t + 37.0/12) + 1.0/2*sin(6*t + 3) + 14)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/7*sin(1.0/8 - 7*t) - 3.0/5*sin(5.0/4 - 5*t) - 11.0/7*sin(7.0/8 - 3*t) - 405.0/29*sin(5.0/7 -t) + 4.0/3*sin(2*t + 8.0/5) + 1.0/2*sin(4*t + 23.0/7) + 1.0/3*sin(6*t + 8.0/3) + 63.0/5)*theta(27*PI -t)*theta(t - 23*PI) + (-3.0/8*sin(8.0/9 - 10*t) - 2.0/5*sin(3.0/8 - 9*t) - 1.0/6*sin(1.0/3 - 8*t) - 8.0/9*sin(3.0/4 - 7*t) - 7.0/8*sin(9.0/7 - 6*t) - 4.0/3*sin(7.0/6 - 5*t) - 1.0/4*sin(5.0/7 - 4*t) - 5.0/2*sin(26.0/25 - 3*t) - 35.0/4*sin(7.0/5 - 2*t) - 23.0/6*sin(6.0/5 -t) + 1.0/6*sin(11*t + 1.0/3) + 1.0/7*sin(12*t + 13.0/6) + 88.0/7)*theta(23*PI -t)*theta(t - 19*PI) + (-2.0/3*sin(1.0/2 - 7*t) - 3.0/8*sin(1.0/6 - 6*t) - 5.0/7*sin(1.0/5 - 5*t) - 4.0/7*sin(2.0/3 - 4*t) - 13.0/5*sin(5.0/4 - 3*t) - 29.0/7*sin(10.0/9 - 2*t) - 31.0/8*sin(3.0/4 -t) + 1.0/10*sin(8*t + 2.0/7) + 1.0/4*sin(9*t + 4.0/7) + 1.0/5*sin(10*t + 13.0/7) + 1.0/3*sin(11*t + 1.0/3) + 1.0/22*sin(12*t + 16.0/5) + 1.0/6*sin(13*t + 3.0/2) + 1.0/7*sin(14*t + 16.0/7) + 1.0/7*sin(15*t + 6.0/5) + 1.0/21*sin(16*t + 7.0/3) + 26.0/3)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/7*sin(5.0/6 - 15*t) - 1.0/3*sin(1 - 7*t) - 5.0/6*sin(16.0/11 - 6*t) - 4.0/3*sin(4.0/3 - 4*t) + 1.0/3*sin(t + 43.0/14) + 151.0/6*sin(2*t + 3.0/2) + 21.0/10*sin(3*t + 9.0/4) + 11.0/12*sin(5*t + 9.0/4) + 1.0/4*sin(8*t + 81.0/20) + 2.0/9*sin(9*t + 9.0/4) + 5.0/6*sin(10*t + 29.0/7) + 1.0/7*sin(11*t + 39.0/11) + 5.0/11*sin(12*t + 7.0/4) + 1.0/7*sin(13*t + 19.0/6) + 1.0/6*sin(14*t + 31.0/8) + 1.0/32*sin(16*t + 1.0/7) + 1.0/7*sin(17*t + 16.0/5) + 276.0/7)*theta(15*PI -t)*theta(t - 11*PI) + (-1.0/8*sin(6.0/5 - 14*t) - 1.0/19*sin(3.0/2 - 9*t) - 6.0/11*sin(1.0/9 - 7*t) - 21.0/22*sin(2.0/7 - 5*t) - 11.0/4*sin(13.0/9 -t) + 71.0/3*sin(2*t + 37.0/8) + 5.0/2*sin(3*t + 5.0/8) +sin(4*t + 22.0/5) + 5.0/4*sin(6*t + 17.0/7) + 1.0/8*sin(8*t + 17.0/4) + 1.0/26*sin(10*t + 2.0/5) + 1.0/17*sin(11*t + 38.0/13) + 1.0/3*sin(12*t + 19.0/7) + 3.0/7*sin(13*t + 1.0/3) + 1.0/13*sin(15*t + 3.0/8) + 1.0/11*sin(16*t + 71.0/18) + 198.0/5)*theta(11*PI -t)*theta(t - 7*PI) + (-2.0/7*sin(5.0/11 - 10*t) - 1.0/4*sin(7.0/5 - 8*t) - 5.0/4*sin(1.0/8 - 4*t) + 203.0/6*sin(t + 13.0/4) + 32.0/7*sin(2*t + 13.0/9) + 20.0/7*sin(3*t + 10.0/3) + 33.0/16*sin(5*t + 16.0/11) + 6.0/11*sin(6*t + 29.0/9) + 3.0/4*sin(7*t + 14.0/5) + 2.0/5*sin(9*t + 11.0/4) + 1.0/3*sin(11*t + 38.0/13) + 1.0/4*sin(12*t + 1.0/9) - 1445.0/7)*theta(7*PI -t)*theta(t - 3*PI) + (-5.0/11*sin(6.0/7 - 15*t) - 5.0/4*sin(11.0/7 - 8*t) - 51.0/5*sin(1.0/7 - 4*t) - 131.0/9*sin(9.0/10 - 3*t) + 698.0/3*sin(t + 22.0/7) + 79.0/4*sin(2*t + 18.0/7) + 29.0/7*sin(5*t + 7.0/3) + 8.0/3*sin(6*t + 53.0/18) + 12.0/5*sin(7*t + 3.0/4) + 4.0/9*sin(9*t + 17.0/7) + 11.0/7*sin(10*t + 61.0/15) + 5.0/3*sin(11*t + 5.0/11) + 7.0/8*sin(12*t + 21.0/8) + 1.0/4*sin(13*t + 5.0/4) + 2.0/3*sin(14*t + 24.0/7) + 1.0/2*sin(16*t + 3.0/7) + 1.0/4*sin(17*t + 9.0/4) + 3.0/8*sin(18*t + 27.0/7) + 1.0/4*sin(19*t + 2) - 1243.0/23)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
